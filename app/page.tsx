"use client"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Textarea } from "@/components/ui/textarea"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import {
  Volume2,
  Loader2,
  MessageSquare,
  Play,
  Pause,
  User,
  History,
  BookOpen,
  AlertCircle,
  FileText,
  Trash2,
  Globe,
} from "lucide-react"
import VoiceSettings from "@/components/voice-settings"
import UserProfile from "@/components/user-profile"
import VoiceHistory from "@/components/voice-history"
import AddBookForm from "@/components/add-book-form"

interface BookType {
  id: string
  title: string
  url?: string
  content?: string
  description: string
  type: "url" | "text"
  category: string
  language: string
}

interface VoiceHistoryItem {
  id: string
  text: string
  timestamp: number
  speaker: string
  speed: number
  volume: number
  language: string
  type: "text" | "book"
  bookTitle?: string
}

interface UserProfileData {
  name: string
  email: string
  favoriteVoice: string
  preferredLanguage: string
  profileImage?: string
  favoriteBooks: string[]
  createdAt: number
}

const defaultBooks: BookType[] = [
  {
    id: "default_1",
    title: "‡∏ô‡∏¥‡∏ó‡∏≤‡∏ô‡∏≠‡∏µ‡∏™‡∏õ_‡∏î‡∏≤‡∏ß‡∏•‡∏π‡∏Å‡πÑ‡∏Å‡πà",
    url: "https://www.kalyanamitra.org/th/Aesop_detail.php?page=4010",
    description: "‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡∏≤‡∏ß‡∏Ç‡∏≠‡∏á‡∏î‡∏≤‡∏ß‡∏•‡∏π‡∏Å‡πÑ‡∏Å‡πà",
    type: "url",
    category: "‡∏ô‡∏¥‡∏ó‡∏≤‡∏ô",
    language: "th",
  },
  {
    id: "default_2",
    title: "‡∏ô‡∏¥‡∏ó‡∏≤‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ö‡πâ‡∏≤‡∏ô‡πÑ‡∏ó‡∏¢ - ‡∏ô‡∏≤‡∏á‡∏™‡∏µ‡∏î‡∏≤",
    url: "https://th.wikipedia.org/wiki/‡∏ô‡∏≤‡∏á‡∏™‡∏µ‡∏î‡∏≤",
    description: "‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡∏≤‡∏ß‡∏Ç‡∏≠‡∏á‡∏ô‡∏≤‡∏á‡∏™‡∏µ‡∏î‡∏≤‡πÉ‡∏ô‡∏£‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡∏¢‡∏£‡∏ï‡∏¥‡πå",
    type: "url",
    category: "‡∏ô‡∏¥‡∏ó‡∏≤‡∏ô",
    language: "th",
  },
  
]

const languages = [
  { code: "th", name: "‡πÑ‡∏ó‡∏¢", flag: "üáπüá≠" },
  { code: "en", name: "English", flag: "üá∫üá∏" },
  { code: "zh", name: "‰∏≠Êñá", flag: "üá®üá≥" },
  { code: "ja", name: "Êó•Êú¨Ë™û", flag: "üáØüáµ" },
  { code: "ko", name: "ÌïúÍµ≠Ïñ¥", flag: "üá∞üá∑" },
]

export default function TextToSpeechApp() {
  const [activeTab, setActiveTab] = useState("text")
  const [text, setText] = useState("")
  const [selectedBook, setSelectedBook] = useState<string>("")
  const [bookContent, setBookContent] = useState<string>("")
  const [availableBooks, setAvailableBooks] = useState<BookType[]>(defaultBooks)
  const [isLoading, setIsLoading] = useState(false)
  const [isLoadingBook, setIsLoadingBook] = useState(false)
  const [audioUrl, setAudioUrl] = useState<string | null>(null)
  const [isPlaying, setIsPlaying] = useState(false)
  const [currentAudio, setCurrentAudio] = useState<HTMLAudioElement | null>(null)
  const [speed, setSpeed] = useState(1.0)
  const [volume, setVolume] = useState(1.0)
  const [speaker, setSpeaker] = useState("1")
  const [language, setLanguage] = useState("th")
  const [error, setError] = useState<string | null>(null)

  const [sampleAudioUrl, setSampleAudioUrl] = useState<string | null>(null)
  const [isLoadingSample, setIsLoadingSample] = useState<string | null>(null)
  const [sampleAudio, setSampleAudio] = useState<HTMLAudioElement | null>(null)

  const [userProfile, setUserProfile] = useState<UserProfileData | null>(null)
  const [voiceHistory, setVoiceHistory] = useState<VoiceHistoryItem[]>([])

  const [selectedCategory, setSelectedCategory] = useState<string>("all")
  const [selectedLanguageFilter, setSelectedLanguageFilter] = useState<string>("all")

  // Load data from localStorage on component mount
  useEffect(() => {
    try {
      const savedProfile = localStorage.getItem("userProfile")
      const savedHistory = localStorage.getItem("voiceHistory")
      const savedBooks = localStorage.getItem("customBooks")
      const deletedDefaults = localStorage.getItem("deletedDefaultBooks")

      if (savedProfile) {
        setUserProfile(JSON.parse(savedProfile))
      }

      if (savedHistory) {
        setVoiceHistory(JSON.parse(savedHistory))
      }

      // Load books
      let booksToShow = [...defaultBooks]

      // Remove deleted default books
      if (deletedDefaults) {
        const deletedIds = JSON.parse(deletedDefaults)
        booksToShow = booksToShow.filter((book) => !deletedIds.includes(book.id))
      }

      // Add custom books
      if (savedBooks) {
        const customBooks = JSON.parse(savedBooks)
        booksToShow = [...booksToShow, ...customBooks]
      }

      setAvailableBooks(booksToShow)
    } catch (error) {
      console.error("Error loading saved data:", error)
    }
  }, [])

  const saveToHistory = (text: string, type: "text" | "book", bookTitle?: string) => {
    try {
      const historyItem: VoiceHistoryItem = {
        id: Date.now().toString(),
        text: text.substring(0, 100) + (text.length > 100 ? "..." : ""),
        timestamp: Date.now(),
        speaker,
        speed,
        volume,
        language,
        type,
        bookTitle,
      }

      const newHistory = [historyItem, ...voiceHistory].slice(0, 50)
      setVoiceHistory(newHistory)
      localStorage.setItem("voiceHistory", JSON.stringify(newHistory))
    } catch (error) {
      console.error("Error saving to history:", error)
    }
  }

  const handlePlaySample = async (speakerId: string, speakerName: string) => {
    setIsLoadingSample(speakerId)
    setError(null)

    if (sampleAudio) {
      sampleAudio.pause()
      setSampleAudio(null)
    }

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≥‡∏û‡∏π‡∏î‡∏ó‡∏î‡∏•‡∏≠‡∏á
    try {
      const sampleTexts = {
        th: `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏â‡∏±‡∏ô‡∏Ñ‡∏∑‡∏≠${speakerName} ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å`,
        en: `Hello, I'm ${speakerName}. Nice to meet you.`,
        zh: `‰Ω†Â•ΩÔºåÊàëÊòØ${speakerName}ÔºåÂæàÈ´òÂÖ¥ËÆ§ËØÜ‰Ω†„ÄÇ`,
        ja: `„Åì„Çì„Å´„Å°„ÅØ„ÄÅÁßÅ„ÅØ${speakerName}„Åß„Åô„ÄÇ„Çà„Çç„Åó„Åè„ÅäÈ°ò„ÅÑ„Åó„Åæ„Åô„ÄÇ`,
        // ko: `ÏïàÎÖïÌïòÏÑ∏Ïöî, Ï†ÄÎäî ${speakerName}ÏûÖÎãàÎã§. ÎßåÎÇòÏÑú Î∞òÍ∞ëÏäµÎãàÎã§.`,
      }

      const response = await fetch("/api/sample-voice", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          text: sampleTexts[language as keyof typeof sampleTexts] || sampleTexts.th,
          speaker: speakerId,
          speed: 1.0,
          volume: 1.0,
          language: language,
        }),
      })

      const data = await response.json()

      if (!response.ok) {
        throw new Error(data.error || `HTTP error! status: ${response.status}`)
      }

      if (data.audioUrl) {
        setSampleAudioUrl(data.audioUrl)
        const audio = new Audio(data.audioUrl)
        setSampleAudio(audio)

        audio.onerror = () => {
          setError("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏î‡πâ")
        }

        audio.play().catch((error) => {
          console.error("Error playing audio:", error)
          setError("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏î‡πâ")
        })
      } else {
        throw new Error("‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö URL ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á")
      }
    } catch (error) {
      console.error("Error:", error)
      setError(error instanceof Error ? error.message : "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ")
    } finally {
      setIsLoadingSample(null)
    }
  }

  const handleSpeak = async (
    textToSpeak: string,
    type: "text" | "book" = "text",
    bookTitle?: string,
    bookLanguage?: string,
  ) => {
    if (!textToSpeak.trim()) {
      setError("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô")
      return
    }

    setIsLoading(true)
    setAudioUrl(null)
    setError(null)

    try {
      const response = await fetch("/api/speak", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          text: textToSpeak,
          speed: speed,
          volume: volume,
          speaker: speaker,
          language: bookLanguage || language, // ‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        }),
      })

      const data = await response.json()

      if (!response.ok) {
        throw new Error(data.error || `HTTP error! status: ${response.status}`)
      }

      if (data.audioUrl) {
        setAudioUrl(data.audioUrl)
        const audio = new Audio(data.audioUrl)
        setCurrentAudio(audio)

        audio.onerror = () => {
          setError("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏î‡πâ")
        }

        audio.play().catch((error) => {
          console.error("Error playing audio:", error)
          setError("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏î‡πâ")
        })

        setIsPlaying(true)

        audio.onended = () => {
          setIsPlaying(false)
        }

        // Save to history
        saveToHistory(textToSpeak, type, bookTitle)
      } else {
        throw new Error("‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö URL ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á")
      }
    } catch (error) {
      console.error("Error:", error)
      setError(error instanceof Error ? error.message : "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏î‡πâ")
    } finally {
      setIsLoading(false)
    }
  }

  const handleLoadBook = async () => {
    if (!selectedBook) {
      setError("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô")
      return
    }

    const book = availableBooks.find((b) => b.id === selectedBook)
    if (!book) return

    // If it's a text-based book, use the content directly
    if (book.type === "text" && book.content) {
      setBookContent(book.content)
      return
    }

    // If it's a URL-based book, fetch the content
    if (book.type === "url" && book.url) {
      setIsLoadingBook(true)
      setBookContent("")
      setError(null)

      try {
        const response = await fetch("/api/fetch-book", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ url: book.url }),
        })

        const data = await response.json()

        if (!response.ok) {
          throw new Error(data.error || `HTTP error! status: ${response.status}`)
        }

        setBookContent(data.content)
      } catch (error) {
        console.error("Error:", error)
        setError(error instanceof Error ? error.message : "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÑ‡∏î‡πâ")
      } finally {
        setIsLoadingBook(false)
      }
    }
  }

  const handleDeleteBook = (bookId: string) => {
    if (confirm("‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?")) {
      try {
        const updatedBooks = availableBooks.filter((book) => book.id !== bookId)
        setAvailableBooks(updatedBooks)

        // Update localStorage - save all books except the deleted one
        const customBooks = updatedBooks.filter((book) => !book.id.startsWith("default_"))
        localStorage.setItem("customBooks", JSON.stringify(customBooks))

        // Also save which default books were deleted
        const deletedDefaults = defaultBooks
          .filter((book) => !updatedBooks.find((b) => b.id === book.id))
          .map((b) => b.id)
        localStorage.setItem("deletedDefaultBooks", JSON.stringify(deletedDefaults))

        // Reset selection if deleted book was selected
        if (selectedBook === bookId) {
          setSelectedBook("")
          setBookContent("")
        }
      } catch (error) {
        console.error("Error deleting book:", error)
        setError("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÑ‡∏î‡πâ")
      }
    }
  }

  const handleAddBook = (newBook: BookType) => {
    try {
      const updatedBooks = [...availableBooks, newBook]
      setAvailableBooks(updatedBooks)

      // Save custom books to localStorage
      const customBooks = updatedBooks.filter((book) => !defaultBooks.find((db) => db.id === book.id))
      localStorage.setItem("customBooks", JSON.stringify(customBooks))
    } catch (error) {
      console.error("Error adding book:", error)
      setError("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÑ‡∏î‡πâ")
    }
  }

  const handleDeleteHistory = (id: string) => {
    try {
      const newHistory = voiceHistory.filter((item) => item.id !== id)
      setVoiceHistory(newHistory)
      localStorage.setItem("voiceHistory", JSON.stringify(newHistory))
    } catch (error) {
      console.error("Error deleting history:", error)
      setError("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÑ‡∏î‡πâ")
    }
  }

  const handleClearAllHistory = () => {
    try {
      setVoiceHistory([])
      localStorage.removeItem("voiceHistory")
    } catch (error) {
      console.error("Error clearing history:", error)
      setError("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏î‡πâ")
    }
  }

  const togglePlayPause = () => {
    if (currentAudio) {
      if (isPlaying) {
        currentAudio.pause()
        setIsPlaying(false)
      } else {
        currentAudio.play().catch((error) => {
          console.error("Error playing audio:", error)
          setError("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏î‡πâ")
        })
        setIsPlaying(true)
      }
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-4">
      <div className="max-w-6xl mx-auto pt-8">
        <Card className="shadow-lg">
          <CardHeader className="text-center">
            <CardTitle className="text-3xl font-bold text-gray-800 flex items-center justify-center gap-2">
              <Volume2 className="h-8 w-8 text-blue-600" />
              ‡πÅ‡∏≠‡∏õ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠
            </CardTitle>
            <CardDescription className="text-lg text-gray-600">
              ‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏∞‡πÑ‡∏£‡∏Å‡πá‡πÑ‡∏î‡πâ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏≠‡∏≠‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏î‡πâ‡∏ß‡∏¢ Botnoi Voice API ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡∏ú‡∏™‡∏°‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
            </CardDescription>
          </CardHeader>
          <CardContent>
            {error && (
              <div className="mb-4 p-3 bg-red-50 border border-red-200 rounded-lg flex items-center gap-2 text-red-700">
                <AlertCircle className="h-4 w-4" />
                <span className="text-sm">{error}</span>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => setError(null)}
                  className="ml-auto h-6 w-6 p-0 text-red-700 hover:bg-red-100"
                >
                  √ó
                </Button>
              </div>
            )}

            <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
              <TabsList className="grid w-full grid-cols-5">
                <TabsTrigger value="text" className="flex items-center gap-2">
                  <MessageSquare className="h-4 w-4" />
                  ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
                </TabsTrigger>
                <TabsTrigger value="book" className="flex items-center gap-2">
                  <BookOpen className="h-4 w-4" />
                  ‡∏≠‡πà‡∏≤‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠
                </TabsTrigger>
                <TabsTrigger value="profile" className="flex items-center gap-2">
                  <User className="h-4 w-4" />
                  ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
                </TabsTrigger>
                <TabsTrigger value="history" className="flex items-center gap-2">
                  <History className="h-4 w-4" />
                  ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
                </TabsTrigger>
                <TabsTrigger value="manage" className="flex items-center gap-2">
                  <FileText className="h-4 w-4" />
                  ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠
                </TabsTrigger>
              </TabsList>

              <TabsContent value="text" className="space-y-6 mt-6">
                <div className="mb-4">
                  <label className="text-sm font-medium text-gray-700 mb-2 block">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏©‡∏≤‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡πà‡∏≤‡∏ô‡∏≠‡∏≠‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á:</label>
                  <Select value={language} onValueChange={setLanguage}>
                    <SelectTrigger className="w-full max-w-xs">
                      <SelectValue placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏©‡∏≤..." />
                    </SelectTrigger>
                    <SelectContent>
                      {languages.map((lang) => (
                        <SelectItem key={lang.code} value={lang.code}>
                          <div className="flex items-center gap-2">
                            <span>{lang.flag}</span>
                            <span>{lang.name}</span>
                          </div>
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                  <p className="text-xs text-gray-500 mt-1">
                    üí° ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏™‡∏°‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡πÑ‡∏î‡πâ
                  </p>
                </div>

                <VoiceSettings
                  speed={speed}
                  volume={volume}
                  speaker={speaker}
                  language={language}
                  onSpeedChange={setSpeed}
                  onVolumeChange={setVolume}
                  onSpeakerChange={setSpeaker}
                  onPlaySample={handlePlaySample}
                  isLoadingSample={isLoadingSample}
                />

                {/* Multi-language Support Info */}
                <Card className="border-2 border-dashed border-green-200 bg-green-50/30">
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2 text-lg">
                      <Globe className="h-5 w-5 text-green-600" />
                      ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏†‡∏≤‡∏©‡∏≤
                    </CardTitle>
                    <CardDescription>‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏∞‡πÑ‡∏£‡∏Å‡πá‡πÑ‡∏î‡πâ ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏≠‡πà‡∏≤‡∏ô‡∏≠‡∏≠‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥</CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-3">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                      <div className="space-y-2">
                        <h4 className="font-medium text-green-800">üåç ‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö:</h4>
                        <div className="space-y-1">
                          <div className="flex items-center gap-2">
                            <span>üáπüá≠</span>
                            <span>‡πÑ‡∏ó‡∏¢ - ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö</span>
                          </div>
                          <div className="flex items-center gap-2">
                            <span>üá∫üá∏</span>
                            <span>English - Hello World</span>
                          </div>
                          <div className="flex items-center gap-2">
                            <span>üá®üá≥</span>
                            <span>‰∏≠Êñá - ‰Ω†Â•Ω‰∏ñÁïå</span>
                          </div>
                          <div className="flex items-center gap-2">
                            <span>üáØüáµ</span>
                            <span>Êó•Êú¨Ë™û - „Åì„Çì„Å´„Å°„ÅØ</span>
                          </div>
                          {/* <div className="flex items-center gap-2">
                            <span>üá∞üá∑</span>
                            <span>ÌïúÍµ≠Ïñ¥ - ÏïàÎÖïÌïòÏÑ∏Ïöî</span>
                          </div> */}
                        </div>
                      </div>
                      {/* <div className="space-y-2">
                        <h4 className="font-medium text-green-800">‚ú® ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏†‡∏≤‡∏©‡∏≤‡∏ú‡∏™‡∏°:</h4>
                        <div className="space-y-1 text-gray-600">
                          <p>"‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ Hello ‰Ω†Â•Ω"</p>
                          <p>"I love ‡∏Å‡∏¥‡∏ô sushi ÂØøÂè∏"</p>
                          <p>"Today ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ is beautiful"</p>
                          <p>"Thank you ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì Ë∞¢Ë∞¢"</p>
                        </div>
                      </div> */}
                    </div>
                    <div className="mt-4 p-3 bg-green-100 rounded-lg">
                      {/* <p className="text-sm text-green-800">
                        <strong>üí° ‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö:</strong> ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏©‡∏≤‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
                      </p> */}
                    </div>
                  </CardContent>
                </Card>

                <div className="space-y-6">
                  <div className="space-y-2">
                    {/* <label htmlFor="text-input" className="text-sm font-medium text-gray-700">
                      ‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏†‡∏≤‡∏©‡∏≤):
                    </label> */}
                    <Textarea
                      id="text-input"
                      // placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà... ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏™‡πà‡∏´‡∏•‡∏≤‡∏¢‡∏†‡∏≤‡∏©‡∏≤‡∏ú‡∏™‡∏°‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ ‡πÄ‡∏ä‡πà‡∏ô ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ Hello ‰Ω†Â•Ω „Åì„Çì„Å´„Å°„ÅØ ÏïàÎÖïÌïòÏÑ∏Ïöî"
                      value={text}
                      onChange={(e) => setText(e.target.value)}
                      className="min-h-[120px] resize-none"
                      disabled={isLoading}
                    />
                    <p className="text-xs text-gray-500">
                      ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö: ‡πÑ‡∏ó‡∏¢, English, ‰∏≠Êñá, Êó•Êú¨Ë™û
                    </p>
                  </div>

                  <Button
                    onClick={() => handleSpeak(text, "text")}
                    disabled={isLoading || !text.trim()}
                    className="w-full h-12 text-lg font-semibold"
                    size="lg"
                  >
                    {isLoading ? (
                      <>
                        <Loader2 className="mr-2 h-5 w-5 animate-spin" />
                        ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á...
                      </>
                    ) : (
                      <>
                        <Volume2 className="mr-2 h-5 w-5" />
                        ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏≠‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á
                      </>
                    )}
                  </Button>
                </div>

                {audioUrl && (
                  <div className="space-y-3 mt-6 p-4 bg-gray-50 rounded-lg">
                    <div className="flex items-center justify-between">
                      <h3 className="text-sm font-medium text-gray-700">‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß:</h3>
                      <Button
                        onClick={togglePlayPause}
                        variant="outline"
                        size="sm"
                        className="flex items-center gap-2 bg-transparent"
                      >
                        {isPlaying ? (
                          <>
                            <Pause className="h-4 w-4" />
                            ‡∏´‡∏¢‡∏∏‡∏î
                          </>
                        ) : (
                          <>
                            <Play className="h-4 w-4" />
                            ‡πÄ‡∏•‡πà‡∏ô
                          </>
                        )}
                      </Button>
                    </div>
                    <audio controls src={audioUrl} className="w-full" preload="auto">
                      ‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á
                    </audio>
                    <p className="text-xs text-gray-500">‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏à‡∏∞‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à</p>
                  </div>
                )}
              </TabsContent>

              <TabsContent value="book" className="space-y-6 mt-6">
                <VoiceSettings
                  speed={speed}
                  volume={volume}
                  speaker={speaker}
                  language={language}
                  onSpeedChange={setSpeed}
                  onVolumeChange={setVolume}
                  onSpeakerChange={setSpeaker}
                  onPlaySample={handlePlaySample}
                  isLoadingSample={isLoadingSample}
                />

                {/* Book Filtering */}
                <Card className="border-2 border-dashed border-purple-200 bg-purple-50/30">
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2 text-lg">
                      <BookOpen className="h-5 w-5 text-purple-600" />
                      ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
                    </CardTitle>
                    <CardDescription>‡∏Å‡∏£‡∏≠‡∏á‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÅ‡∏•‡∏∞‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£</CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className="space-y-2">
                        <label className="text-sm font-medium text-gray-700">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠:</label>
                        <Select value={selectedCategory} onValueChange={setSelectedCategory}>
                          <SelectTrigger>
                            <SelectValue placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó..." />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="all">‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</SelectItem>
                            {Array.from(new Set(availableBooks.map((book) => book.category))).map((category) => (
                              <SelectItem key={category} value={category}>
                                {category}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      </div>

                      <div className="space-y-2">
                        <label className="text-sm font-medium text-gray-700">‡∏†‡∏≤‡∏©‡∏≤:</label>
                        <Select value={selectedLanguageFilter} onValueChange={setSelectedLanguageFilter}>
                          <SelectTrigger>
                            <SelectValue placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏©‡∏≤..." />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="all">‡∏ó‡∏∏‡∏Å‡∏†‡∏≤‡∏©‡∏≤</SelectItem>
                            {languages.map((lang) => (
                              <SelectItem key={lang.code} value={lang.code}>
                                <div className="flex items-center gap-2">
                                  <span>{lang.flag}</span>
                                  <span>{lang.name}</span>
                                </div>
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      </div>
                    </div>
                  </CardContent>
                </Card>

                <div className="space-y-4">
                  <div className="space-y-2">
                    <label className="text-sm font-medium text-gray-700">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô:</label>
                    <div className="flex gap-2">
                      <Select value={selectedBook} onValueChange={setSelectedBook}>
                        <SelectTrigger className="flex-1">
                          <SelectValue placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠..." />
                        </SelectTrigger>
                        <SelectContent>
                          {availableBooks
                            .filter(
                              (book) =>
                                (selectedCategory === "all" || book.category === selectedCategory) &&
                                (selectedLanguageFilter === "all" || book.language === selectedLanguageFilter),
                            )
                            .map((book) => (
                              <SelectItem key={book.id} value={book.id}>
                                <div className="flex flex-col">
                                  <div className="flex items-center gap-2">
                                    <span className="font-medium">{book.title}</span>
                                    <span className="text-xs px-2 py-1 bg-gray-100 rounded">
                                      {book.type === "url" ? "‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå" : "‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"}
                                    </span>
                                    <span className="text-xs px-2 py-1 bg-blue-100 text-blue-600 rounded">
                                      {book.category}
                                    </span>
                                    <span className="text-xs px-2 py-1 bg-green-100 text-green-600 rounded">
                                      {languages.find((l) => l.code === book.language)?.flag}{" "}
                                      {languages.find((l) => l.code === book.language)?.name}
                                    </span>
                                  </div>
                                  <span className="text-xs text-gray-500">{book.description}</span>
                                </div>
                              </SelectItem>
                            ))}
                        </SelectContent>
                      </Select>
                      {selectedBook && (
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => handleDeleteBook(selectedBook)}
                          className="text-red-600 hover:text-red-700 hover:bg-red-50"
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      )}
                    </div>
                    <p className="text-xs text-gray-500">
                      ‡πÅ‡∏™‡∏î‡∏á{" "}
                      {
                        availableBooks.filter(
                          (book) =>
                            (selectedCategory === "all" || book.category === selectedCategory) &&
                            (selectedLanguageFilter === "all" || book.language === selectedLanguageFilter),
                        ).length
                      }{" "}
                      ‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {availableBooks.length} ‡πÄ‡∏•‡πà‡∏°
                    </p>
                  </div>

                  <Button
                    onClick={handleLoadBook}
                    disabled={isLoadingBook || !selectedBook}
                    className="w-full bg-transparent"
                    variant="outline"
                  >
                    {isLoadingBook ? (
                      <>
                        <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                        ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤...
                      </>
                    ) : (
                      <>
                        <BookOpen className="mr-2 h-4 w-4" />
                        ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠
                      </>
                    )}
                  </Button>

                  {bookContent && (
                    <div className="space-y-4">
                      <div className="space-y-2">
                        <label className="text-sm font-medium text-gray-700">‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠:</label>
                        <Textarea
                          value={bookContent}
                          onChange={(e) => setBookContent(e.target.value)}
                          className="min-h-[200px] resize-none"
                          placeholder="‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà..."
                        />
                        <p className="text-xs text-gray-500">‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÑ‡∏î‡πâ</p>
                      </div>

                      <Button
                        onClick={() => {
                          const book = availableBooks.find((b) => b.id === selectedBook)
                          // ‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                          const bookLanguage = book?.language || language
                          handleSpeak(bookContent, "book", book?.title, bookLanguage)
                        }}
                        disabled={isLoading || !bookContent.trim()}
                        className="w-full h-12 text-lg font-semibold"
                        size="lg"
                      >
                        {isLoading ? (
                          <>
                            <Loader2 className="mr-2 h-5 w-5 animate-spin" />
                            ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á...
                          </>
                        ) : (
                          <>
                            <Volume2 className="mr-2 h-5 w-5" />
                            ‡∏≠‡πà‡∏≤‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏≠‡∏≠‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á
                          </>
                        )}
                      </Button>
                    </div>
                  )}
                </div>

                {audioUrl && (
                  <div className="space-y-3 mt-6 p-4 bg-gray-50 rounded-lg">
                    <div className="flex items-center justify-between">
                      <h3 className="text-sm font-medium text-gray-700">‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß:</h3>
                      <Button
                        onClick={togglePlayPause}
                        variant="outline"
                        size="sm"
                        className="flex items-center gap-2 bg-transparent"
                      >
                        {isPlaying ? (
                          <>
                            <Pause className="h-4 w-4" />
                            ‡∏´‡∏¢‡∏∏‡∏î
                          </>
                        ) : (
                          <>
                            <Play className="h-4 w-4" />
                            ‡πÄ‡∏•‡πà‡∏ô
                          </>
                        )}
                      </Button>
                    </div>
                    <audio controls src={audioUrl} className="w-full" preload="auto">
                      ‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á
                    </audio>
                    <p className="text-xs text-gray-500">‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏à‡∏∞‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à</p>
                  </div>
                )}
              </TabsContent>

              <TabsContent value="profile" className="mt-6">
                <UserProfile
                  userProfile={userProfile}
                  availableBooks={availableBooks}
                  onUpdateProfile={(profile) => {
                    setUserProfile(profile)
                    try {
                      localStorage.setItem("userProfile", JSON.stringify(profile))
                    } catch (error) {
                      console.error("Error saving profile:", error)
                      setError("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ")
                    }
                  }}
                />
              </TabsContent>

              <TabsContent value="history" className="mt-6">
                <VoiceHistory
                  history={voiceHistory}
                  onDeleteItem={handleDeleteHistory}
                  onClearAll={handleClearAllHistory}
                  onReplay={(item) => {
                    setSpeaker(item.speaker)
                    setSpeed(item.speed)
                    setVolume(item.volume)
                    setLanguage(item.language)
                    setText(item.text)
                    setActiveTab("text")
                  }}
                />
              </TabsContent>

              <TabsContent value="manage" className="mt-6">
                <AddBookForm onAddBook={handleAddBook} />
              </TabsContent>
            </Tabs>
          </CardContent>
        </Card>

        <div className="mt-8 text-center text-sm text-gray-600">
          <p>‡∏Ç‡∏±‡∏ö‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÇ‡∏î‡∏¢ Botnoi Voice API</p>
          <p className="mt-1">‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏†‡∏≤‡∏©‡∏≤‡πÅ‡∏•‡∏∞‡∏†‡∏≤‡∏©‡∏≤‡∏ú‡∏™‡∏°‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô</p>
        </div>
      </div>
    </div>
  )
}
