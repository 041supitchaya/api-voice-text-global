"use client"

import { Slider } from "@/components/ui/slider"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Settings, Volume2, Gauge, User, Play, Loader2 } from "lucide-react"

interface VoiceSettingsProps {
  speed: number
  volume: number
  speaker: string
  language: string // Add this line
  onSpeedChange: (speed: number) => void
  onVolumeChange: (volume: number) => void
  onSpeakerChange: (speaker: string) => void
  onPlaySample?: (speakerId: string, speakerName: string) => void
  isLoadingSample?: string | null
}

export default function VoiceSettings({
  speed,
  volume,
  speaker,
  language, // Add this line
  onSpeedChange,
  onVolumeChange,
  onSpeakerChange,
  onPlaySample,
  isLoadingSample,
}: VoiceSettingsProps) {
  const speakerOptions = [
    { value: "1", label: "‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ú‡∏π‡πâ‡∏´‡∏ç‡∏¥‡∏á 1", description: "‡∏ô‡∏∏‡πà‡∏°‡∏ô‡∏ß‡∏• ‡∏≠‡πà‡∏≠‡∏ô‡πÇ‡∏¢‡∏ô", name: "‡∏Ñ‡∏∏‡∏ì‡∏ô‡∏¥‡∏î‡∏≤" },
    { value: "2", label: "‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ú‡∏π‡πâ‡∏´‡∏ç‡∏¥‡∏á 2", description: "‡∏™‡∏î‡πÉ‡∏™ ‡∏°‡∏µ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏ä‡∏µ‡∏ß‡∏≤", name: "‡∏Ñ‡∏∏‡∏ì‡∏™‡∏∏‡∏î‡∏≤" },
    { value: "3", label: "‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ú‡∏π‡πâ‡∏ä‡∏≤‡∏¢ 1", description: "‡πÄ‡∏Ç‡πâ‡∏°‡πÅ‡∏Ç‡πá‡∏á ‡∏°‡∏±‡πà‡∏ô‡∏Ñ‡∏á", name: "‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ä‡∏≤‡∏¢" },
    { value: "4", label: "‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ú‡∏π‡πâ‡∏ä‡∏≤‡∏¢ 2", description: "‡∏≠‡πà‡∏≠‡∏ô‡πÇ‡∏¢‡∏ô ‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£", name: "‡∏Ñ‡∏∏‡∏ì‡∏ß‡∏¥‡∏ä‡∏±‡∏¢" },
    { value: "5", label: "‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏î‡πá‡∏Å", description: "‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å ‡πÉ‡∏™‡πÉ‡∏™", name: "‡∏ô‡πâ‡∏≠‡∏á‡∏°‡∏¥‡∏ô‡∏¥" },
    { value: "6", label: "‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ú‡∏π‡πâ‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏¢‡∏∏", description: "‡∏≠‡∏ö‡∏≠‡∏∏‡πà‡∏ô ‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå", name: "‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏≤‡∏¢" },
  ]

  return (
    <Card className="mb-6">
      <CardHeader>
        <CardTitle className="flex items-center gap-2 text-lg">
          <Settings className="h-5 w-5 text-blue-600" />
          ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏™‡∏µ‡∏¢‡∏á
        </CardTitle>
        <CardDescription>‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡πÇ‡∏ó‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß ‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£</CardDescription>
      </CardHeader>
      <CardContent>
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Speaker Selection with Samples */}
          <div className="space-y-3 lg:col-span-2">
            <div className="flex items-center gap-2">
              <User className="h-4 w-4 text-gray-600" />
              <label className="text-sm font-medium text-gray-700">‡πÇ‡∏ó‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á</label>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
              {speakerOptions.map((option) => (
                <div
                  key={option.value}
                  className={`p-3 border rounded-lg cursor-pointer transition-all ${
                    speaker === option.value ? "border-blue-500 bg-blue-50" : "border-gray-200 hover:border-gray-300"
                  }`}
                  onClick={() => onSpeakerChange(option.value)}
                >
                  <div className="flex items-center justify-between">
                    <div className="flex-1">
                      <div className="flex items-center gap-2">
                        <div
                          className={`w-3 h-3 rounded-full ${speaker === option.value ? "bg-blue-500" : "bg-gray-300"}`}
                        />
                        <span className="font-medium text-sm">{option.label}</span>
                      </div>
                      <p className="text-xs text-gray-500 mt-1">{option.description}</p>
                      <p className="text-xs text-blue-600 mt-1 font-medium">{option.name}</p>
                    </div>

                    <Button
                      size="sm"
                      variant="outline"
                      className="ml-2 h-8 w-8 p-0 bg-transparent"
                      onClick={(e) => {
                        e.stopPropagation()
                        onPlaySample?.(option.value, option.name)
                      }}
                      disabled={isLoadingSample === option.value}
                    >
                      {isLoadingSample === option.value ? (
                        <Loader2 className="h-3 w-3 animate-spin" />
                      ) : (
                        <Play className="h-3 w-3" />
                      )}
                    </Button>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* Speed and Volume Controls */}
          <div className="space-y-6">
            {/* Speed Control */}
            <div className="space-y-3">
              <div className="flex items-center gap-2">
                <Gauge className="h-4 w-4 text-gray-600" />
                <label className="text-sm font-medium text-gray-700">
                  ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß: <span className="font-bold text-blue-600">{speed.toFixed(1)}x</span>
                </label>
              </div>
              <Slider
                value={[speed]}
                onValueChange={(value) => onSpeedChange(value[0])}
                max={2.0}
                min={0.5}
                step={0.1}
                className="w-full"
              />
              <div className="flex justify-between text-xs text-gray-500">
                <span>‡∏ä‡πâ‡∏≤</span>
                <span>‡∏õ‡∏Å‡∏ï‡∏¥</span>
                <span>‡πÄ‡∏£‡πá‡∏ß</span>
              </div>
            </div>

            {/* Volume Control */}
            <div className="space-y-3">
              <div className="flex items-center gap-2">
                <Volume2 className="h-4 w-4 text-gray-600" />
                <label className="text-sm font-medium text-gray-700">
                  ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á: <span className="font-bold text-blue-600">{Math.round(volume * 100)}%</span>
                </label>
              </div>
              <Slider
                value={[volume]}
                onValueChange={(value) => onVolumeChange(value[0])}
                max={1.0}
                min={0.1}
                step={0.1}
                className="w-full"
              />
              <div className="flex justify-between text-xs text-gray-500">
                <span>‡πÄ‡∏ö‡∏≤</span>
                <span>‡∏õ‡∏Å‡∏ï‡∏¥</span>
                <span>‡∏î‡∏±‡∏á</span>
              </div>
            </div>
          </div>
        </div>

        {/* Preview Settings */}
        <div className="mt-6 p-4 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg border border-blue-100">
          <div className="flex items-center gap-2 text-sm text-blue-800">
            <Settings className="h-4 w-4" />
            <span className="font-medium">‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:</span>
            <span>
              {speakerOptions.find((s) => s.value === speaker)?.name} | ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß {speed.toFixed(1)}x | ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á{" "}
              {Math.round(volume * 100)}%
            </span>
          </div>
          <p className="text-xs text-blue-600 mt-2">
            üí° ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° <Play className="inline h-3 w-3" /> ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ü‡∏±‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÇ‡∏ó‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á
          </p>
        </div>
      </CardContent>
    </Card>
  )
}
